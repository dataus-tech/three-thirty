<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ThreeThirty_BE.mapper.PostRepository">

  <resultMap id="postResultMap" type="com.example.ThreeThirty_BE.dto.PostResponseDto$Posts">
    <id property="post_id" column="post_id"/>
    <result property="nick_name" column="nick_name"/>
    <result property="image_url" column="image_url"/>
    <result property="post_content" column="post_content"/>
    <result property="update_date" column="update_date"/>
    <result property="like_count" column="like_count"/>
    <result property="hate_count" column="hate_count"/>
    <result property="comment_count" column="comment_count"/>
    <result property="company_title" column="company_title"/>
    <result property="user_id" column="user_id"/>
    <result property="post_type" column="post_type"/>
    <result property="like_status" column="like_status"/>
    <result property="hate_status" column="hate_status"/>
    <collection property="hashtag_content" ofType="java.lang.String">
      <result column="hashtag_content"/>
    </collection>

    <collection property="attach_file_url" ofType="java.lang.String">
      <result column="attach_file_url"/>
    </collection>
  </resultMap>

  <select id = "findPostType">
    select post_type
    from TB_POST_TYPE
    where post_type_title = #{post_type_title}
  </select>

  <select id = "findCompanyCode">
    select company_code
    from TB_COMPANY_TYPE
    where company_title = #{company_title}
  </select>

  <insert id="savePost" useGeneratedKeys="true" keyProperty="post_id">
    insert into TB_POST(post_type, company_code, post_content, post_writer)
    values (#{post_type}, #{company_code}, #{post_content}, #{post_writer})
  </insert>

  <insert id="saveAttachment" useGeneratedKeys="true" keyProperty="attach_file_id">
    INSERT INTO TB_POST_ATTACH (post_id, attach_file_url, attach_file_type_code)
    VALUES
    <foreach collection="list" item="attachment" separator=",">
      (#{attachment.post_id}, #{attachment.attach_file_url}, #{attachment.attach_file_type_code})
    </foreach>
  </insert>

  <insert id="saveHashing" useGeneratedKeys="true" keyProperty="hashtag_id">
    insert into TB_POST_HASHTAG(post_id, hashtag_content)
    values
    <foreach collection="list" item="postHashing" separator=",">
      (#{postHashing.post_id}, #{postHashing.hashtag_content})
    </foreach>
  </insert>

  <select id="findPost" resultMap="postResultMap">
    SELECT
    p.post_id,
    u.user_id,
    u.nick_name,
    u.image_url,
    p.post_content,
    p.update_date,
    p.like_count,
    p.hate_count,
    p.comment_count,
    c.company_title,
    (
    SELECT GROUP_CONCAT(hashtag_content)
    FROM TB_POST_HASHTAG
    WHERE post_id = p.post_id
    ) AS hashtag_content,
    (
    SELECT GROUP_CONCAT(attach_file_url)
    FROM TB_POST_ATTACH
    WHERE post_id = p.post_id
    ) AS attach_file_url,
    CASE WHEN pl.post_id IS NOT NULL THEN 1 ELSE 0 END AS like_status,
    CASE WHEN ph.post_id IS NOT NULL THEN 1 ELSE 0 END AS hate_status
    FROM
    TB_POST p
    LEFT JOIN TB_COMPANY_TYPE c ON p.company_code = c.company_code
    LEFT JOIN TB_USER u ON p.post_writer = u.user_id
    LEFT JOIN TB_POST_LIKE pl ON p.post_id = pl.post_id AND pl.user_id = #{user_id}
    LEFT JOIN TB_POST_HATE ph ON p.post_id = ph.post_id AND ph.user_id = #{user_id}
    WHERE
    p.delete_status = 0 and p.post_type = #{post_type}
    ORDER BY
    p.post_id DESC

  </select>

  <select id="findBestPost" resultMap="postResultMap">
    SELECT
    p.post_id,
    u.user_id,
    u.nick_name,
    u.image_url,
    p.post_content,
    p.update_date,
    p.like_count,
    p.hate_count,
    p.comment_count,
    c.company_title,
    (
    SELECT GROUP_CONCAT(hashtag_content)
    FROM TB_POST_HASHTAG
    WHERE post_id = p.post_id
    ) AS hashtag_content,
    (
    SELECT GROUP_CONCAT(attach_file_url)
    FROM TB_POST_ATTACH
    WHERE post_id = p.post_id
    ) AS attach_file_url,
    CASE WHEN pl.post_id IS NOT NULL THEN 1 ELSE 0 END AS like_status,
    CASE WHEN ph.post_id IS NOT NULL THEN 1 ELSE 0 END AS hate_status
    FROM
    TB_POST p
    LEFT JOIN TB_COMPANY_TYPE c ON p.company_code = c.company_code
    LEFT JOIN TB_USER u ON p.post_writer = u.user_id
    LEFT JOIN TB_POST_LIKE pl ON p.post_id = pl.post_id AND pl.user_id = #{user_id}
    LEFT JOIN TB_POST_HATE ph ON p.post_id = ph.post_id AND ph.user_id = #{user_id}
    WHERE
    p.delete_status = 0
    ORDER BY
    p.like_count DESC
    LIMIT 5;
  </select>

  <update id="deletePost">
    UPDATE TB_POST
    SET delete_status = 1, delete_date = CURRENT_TIMESTAMP
    where post_id = #{post_id}
  </update>

  <select id="findByPostId" resultMap="postResultMap">
    SELECT p.post_id,
    u.nick_name,
    u.image_url,
    p.post_content,
    p.update_date,
    p.like_count,
    p.hate_count,
    p.comment_count,
    c.company_title,
    (
    SELECT GROUP_CONCAT(hashtag_content)
    FROM TB_POST_HASHTAG
    WHERE post_id = p.post_id
    ) AS hashtag_content,
    (
    SELECT GROUP_CONCAT(attach_file_url)
    FROM TB_POST_ATTACH
    WHERE post_id = p.post_id
    ) AS attach_file_url,
    CASE WHEN pl.post_id IS NOT NULL THEN 1 ELSE 0 END AS like_status,
    CASE WHEN ph.post_id IS NOT NULL THEN 1 ELSE 0 END AS hate_status
    FROM TB_POST p
    LEFT JOIN TB_COMPANY_TYPE c ON p.company_code = c.company_code
    LEFT JOIN TB_USER u ON p.post_writer = u.user_id
    LEFT JOIN TB_POST_LIKE pl ON p.post_id = pl.post_id AND pl.user_id = #{user_id}
    LEFT JOIN TB_POST_HATE ph ON p.post_id = ph.post_id AND ph.user_id = #{user_id}
    WHERE p.delete_status = 0 and p.post_id = #{post_id}
  </select>

  <select id = "checkWriter">
    SELECT EXISTS
    (SELECT 1
    FROM TB_POST
    WHERE post_writer = #{user_id} and post_id = #{postId})
  </select>

</mapper>